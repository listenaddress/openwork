'use strict';

/**
 * Module dependencies.
 */
var mongoose = require('mongoose'),
	errorHandler = require('./errors.server.controller'),
	Project = mongoose.model('Project'),
	_ = require('lodash');

/**
 * Create a Project
 */
exports.create = function(req, res) {
	var project = new Project(req.body);
	project.user = req.user;

	project.save(function(err) {
		if (err) {
			return res.status(400).send({
				message: errorHandler.getErrorMessage(err)
			});
		} else {
			res.jsonp(project);
		}
	});
};

/**
 * Show the current Project
 */
exports.read = function(req, res) {
	res.jsonp(req.project);
	console.log(req.cookies);
	console.log("##############");
	console.log(res.req);


};

/**
 * Update a Project
 */
exports.update = function(req, res) {
	var project = req.project ;
	project = _.extend(project , req.body);

	project.save(function(err) {
		if (err) {
			return res.status(400).send({
				message: errorHandler.getErrorMessage(err)
			});
		} else {
			project
				.populate('user', 'username providerData.profile_image_url_https')
				.populate('notes.comments.user', 'username providerData.profile_image_url_https')
				.populate('notes.comments.comments.user', 'username providerData.profile_image_url_https')
				.populate('comments.user', 'username providerData.profile_image_url_https')
				.populate('comments.comments.user', 'username providerData.profile_image_url_https', function() {
					res.jsonp(project);
				});
		}
	});
};

/**
 * Delete an Project
 */
exports.delete = function(req, res) {
	var project = req.project ;

	project.remove(function(err) {
		if (err) {
			return res.status(400).send({
				message: errorHandler.getErrorMessage(err)
			});
		} else {
			res.jsonp(project);
		}
	});
};

/**
 * List of Projects
 */
exports.list = function(req, res) {
	Project.find().sort('-created').populate('user', 'displayName').exec(function(err, projects) {
		if (err) {
			return res.status(400).send({
				message: errorHandler.getErrorMessage(err)
			});
		} else {
			res.jsonp(projects);
		}
	});
};

/**
 * Project middleware
 */
<<<<<<< HEAD
exports.projectByID = function(req, res, next, id) {
	Project.findById(id).populate('user', 'displayName').exec(function(err, project) {
		if (err) return next(err);
		if (! project) return next(new Error('Failed to load Project ' + id));
		req.project = project ;
		next();
	});
=======
exports.projectByID = function(req, res, next, id) { 
	Project.findById(id)
		.populate('user', 'displayName')
		.populate('user', 'username providerData.profile_image_url_https')
		.populate('comments.user', 'username providerData.profile_image_url_https')
		.populate('comments.comments.user', 'username providerData.profile_image_url_https')
		.exec(function(err, project) {
			if (err) return next(err);
			if (! project) return next(new Error('Failed to load Project ' + id));
			req.project = project ;
			next();
		}
	);
>>>>>>> 17b6eb845ed998f0575a0be6c0f993b4c357486f
};

/**
 * Project authorization middleware
 */
exports.hasAuthorization = function(req, res, next) {
	if (req.project.user.id !== req.user.id) {
		return res.status(403).send('User is not authorized');
	}
	next();
};
